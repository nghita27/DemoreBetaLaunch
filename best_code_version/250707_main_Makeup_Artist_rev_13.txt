import streamlit as st
import base64
import os
from beautyblend_theme import apply_beautyblend_theme

#=============== PAGE AUTHENTICATION: LOG IN 

from Security.auth_db import (
    register_user, verify_user_credentials, get_user_by_id,
    send_password_reset_email, update_remember_me
)
import streamlit as st
import os

DB_PATH = os.path.join(os.path.dirname(__file__), "..", "portfolio.db")


# --- Page Config ---
st.set_page_config(page_title="BeautyBlend", layout="wide")


# --- Init session ---
if "auth_status" not in st.session_state:
    st.session_state["auth_status"] = None
    st.session_state["user_id"] = None
    st.session_state["username"] = None
    st.session_state["remember_me"] = False

# --- Top-right dropdown ---
col1, col2 = st.columns([8, 1])
with col2:
    account_action = st.selectbox(
        "Account",
        ["", "Log in", "Register", "Forgot Password", "Logout" if st.session_state["auth_status"] else ""],
        format_func=lambda x: "Account" if x == "" else x,
        label_visibility="collapsed",
        key="account_action_app",
st.subheader(f"üßë Logged in as: {st.session_state.get('username', 'Unknown')}")

if st.button("üö™ Log Out"):
    st.session_state.auth_status = False
    st.session_state.user_id = None
    st.session_state.username = ""
    st.success("You have been logged out.")
    st.experimental_rerun()

    )

# --- Log in ---
if account_action == "Log in":
    with st.form("login_form"):
        st.subheader("üîê Log In")
        username = st.text_input("Username")
        password = st.text_input("Password", type="password")
        remember = st.checkbox("Remember my account")
        submit = st.form_submit_button("Log In")

        if submit:
            user_id = verify_user_credentials(username, password)
            if user_id:
                st.session_state["auth_status"] = True
                st.session_state["user_id"] = user_id
                st.session_state["username"] = username
                st.session_state["remember_me"] = remember
                update_remember_me(user_id, remember)
                st.success(f"Welcome back, {username}!")
                st.experimental_rerun()
            else:
                st.error("Incorrect username or password.")

# --- Register ---
elif account_action == "Register":
    with st.form("register_form"):
        st.subheader("üìù Register")
        new_username = st.text_input("Username")
        new_email = st.text_input("Email")
        new_password = st.text_input("Password", type="password")
        submit = st.form_submit_button("Register")

        if submit:
            if register_user(new_username, new_email, new_password):
                st.success("Registration successful! Please log in.")
            else:
                st.error("Username or email already exists.")

# --- Forgot Password ---
elif account_action == "Forgot Password":
    with st.form("forgot_form"):
        st.subheader("‚ùì Forgot Password")
        email = st.text_input("Enter your registered email")
        submit = st.form_submit_button("Send Reset Link")

        if submit:
            if send_password_reset_email(email):
                st.success("Reset link sent! Please check your inbox.")
            else:
                st.error("Email not found.")

# --- Logout ---
elif account_action == "Logout":
    st.session_state["auth_status"] = None
    st.session_state["user_id"] = None
    st.session_state["username"] = None
    st.session_state["remember_me"] = False
    st.success("Logged out.")
    st.experimental_rerun()

# --- Greeting & Gate ---
if st.session_state["auth_status"]:
    st.markdown(
        f"<div style='position:fixed; top:10px; right:30px; z-index:999;'>"
        f"<b>Welcome, {st.session_state['username']}!</b> "
        f"</div>",
        unsafe_allow_html=True
    )
else:
    st.warning("üîí Please log in to continue.")



#=============== Initialize Session State ---
if "active_tab" not in st.session_state:
    st.session_state["active_tab"] = "home"


# --- Hide Sidebar Nav ---
import streamlit as st

st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Cinzel+Decorative:wght@700&display=swap');
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400&display=swap');

    html, body, .stApp {
        font-family: 'Cinzel Decorative', cursive, serif !important;
    }

    .navbar {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 24px;
        background: transparent;
        padding: 12px 0 8px 0;
        margin-bottom: 18px;
    }

    .nav-link {
        font-family: 'Cinzel Decorative', cursive, serif !important;
        font-size: 18px;
        color: #222 !important;
        text-decoration: none;
        padding: 4px 12px;
        background: none;
        border: none;
        outline: none;
        box-shadow: none;
        cursor: pointer;
        transition: color 0.2s, border-bottom 0.2s;
        border-bottom: 2px solid transparent;
    }

    .nav-link.active, .nav-link:hover {
        color: #b35eae !important;
        border-bottom: 2px solid #b35eae;
        font-weight: bold;
    }

    /* Headings and key BeautyBlend text in Cinzel Decorative */
    h1, h2, h3, .title, .subtitle, .beautyblend-header, .beautyblend-subtitle, .beautyblend-section-header {
        font-family: 'Cinzel Decorative', cursive, serif !important;
        letter-spacing: 0.5px;
    }

    /* Inputs and interactive elements in Poppins */
    input, textarea, select, button, label, .stTextInput > div > div > input {
        font-family: 'Poppins', sans-serif !important;
        letter-spacing: 0.3px;
    }
    </style>
""", unsafe_allow_html=True)


# Define tabs and their keys
tabs = [
    ("about", "About B.Blend"),
    ("gallery", "Explore Gallery"),
    ("find", "Find an Artist"),
    ("help", "Help"),
]

if "active_tab" not in st.session_state:
    st.session_state["active_tab"] = "about"

# Layout: 4 columns for 4 tabs
cols = st.columns(4)
for idx, (tab_key, tab_label) in enumerate(tabs):
    is_active = st.session_state["active_tab"] == tab_key
    btn_class = "nav-btn nav-btn-active" if is_active else "nav-btn"
    # Use markdown to style the button label
    if cols[idx].button(f"{tab_label}", key=f"nav_{tab_key}"):
        st.session_state["active_tab"] = tab_key
    # Add custom style to the button
    cols[idx].markdown(
        f"<style>div[data-testid='stButton'] button{{font-family:'Cinzel Decorative',cursive,serif;font-size:18px;color:{'#b35eae' if is_active else '#222'};border-bottom:{'2px solid #b35eae' if is_active else '2px solid transparent'};background:none;}}</style>",
        unsafe_allow_html=True
    )

    

# Parse the URL query parameter to update the active tab
import urllib.parse
query_params = st.experimental_get_query_params()
if "tab" in query_params and query_params["tab"][0] in dict(tabs):
    if st.session_state["active_tab"] != query_params["tab"][0]:
        st.session_state["active_tab"] = query_params["tab"][0]
        st.experimental_rerun()



# --- About Modal/Slide ---
if st.session_state["active_tab"] == "about":
    bg_image_base64 = get_base64_image("introduction_BeautyBlend.jpg")
    st.markdown(
        f"""
        <style>
        .stApp {{
            background-image: url("data:image/png;base64,{bg_image_base64}");
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            animation: fadeInBg 1.5s ease-in-out forwards;
        }}
        </style>
        <div class="glass-box">
            <div class="title">BeautyBlend</div>
            <div class="subtitle">
                Born from a personal journey through the world of beauty, this platform invites creatives ‚Äî from face designers to professional makeup artists ‚Äî to collaborate, inspire, and bring visual poetry to life.<br><br>
                Designers and dreamers can explore imaginative makeup ideas digitally, while artists bring those visions to life through their craft. Together, they form a living gallery ‚Äî one that celebrates bold expression, individuality, and the magic of transformation.
            </div>
            <div class="subtitle" style="font-style: italic;">‚ÄúArt is not what you see, but what you make others see.‚Äù ‚Äî Edgar Degas</div>
            <div class="subtitle">Created with intention and love by Nikki.</div>
        </div>
        """,
        unsafe_allow_html=True
    )
    if st.button("Back to Home"):
        st.session_state["active_tab"] = "home"
        st.rerun()
    st.stop()

# --- Main Content (only if not About tab) ---
if st.session_state["active_tab"] == "gallery":
    st.title("Explore Gallery")
    st.info("Gallery feature coming soon! Here you'll browse creative works from the BeautyBlend community.")
elif st.session_state["active_tab"] == "find":
    st.title("Find an Artist")
    st.info("Artist search coming soon! You'll be able to discover and connect with top talent.")
elif st.session_state["active_tab"] == "help":
    st.title("Help")
    st.info("Help & How It Works coming soon! Here you'll find tips, FAQs, and platform guidance.")
else:
    # --- Main Glasscard Layout (Home) ---
    st.markdown('<div class="center-content">', unsafe_allow_html=True)
    st.markdown('<div class="glass-box">', unsafe_allow_html=True)
    st.markdown('<div class="title">BeautyBlend</div>', unsafe_allow_html=True)
    st.markdown('<div class="subtitle">Where the face is a canvas, makeup is poetry, and every creation is an unfiltered expression of the artist\'s soul</div>', unsafe_allow_html=True)
    st.markdown('<div class="subheader">Who are you?</div>', unsafe_allow_html=True)

    role_cols = st.columns(3)
    with role_cols[0]:
        if st.button("My Showcase"):
            st.switch_page("pages/main_Makeup_Artist.py")
        st.image("makeup_artist_card.png", width=300)
        st.markdown('<div class="role-title">your creative sanctuary to express, evolve, and showcase the true art of makeup</div>', unsafe_allow_html=True)
    with role_cols[1]:
        if st.button("MyFace Canvas"):
            st.switch_page("pages/1_Face_Designer.py")
        st.image("face_designer_card.png", width=300)
        st.markdown('<div class="role-title">your imaginative canvas to explore, design, and bring visionary face art to live</div>', unsafe_allow_html=True)
    with role_cols[2]:
        if st.button("Art Explorer"):
            st.info("Coming soon! Stay tuned for the Beauty Enjoyer experience.")
        st.image("art_lover_card.png", width=300)
        st.markdown('<div class="role-title">your artistic playground to experiment and let your imagination roam free</div>', unsafe_allow_html=True)
    st.markdown("</div>", unsafe_allow_html=True)
