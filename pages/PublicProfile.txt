import streamlit as st

# Ensure this page only loads if "page=profile" is passed
query_params = st.query_params
if query_params.get("page") != "profile":
    st.stop()

# Proceed with loading the public profile
st.title("üåü Public Profile")
# ... your profile display logic ...

#===========================PUBLIC PROFILE LOGIC===================
# --- Public Profile Logic ---
if st.session_state.get("show_profile", False):
    all_projects = load_projects_from_db(user_id)

    if st.button("‚¨ÖÔ∏è Back to Dashboard"):
        st.session_state["show_profile"] = False
        st.rerun()

    profile = get_profile(user_id)
    img_path = profile[5] if profile and len(profile) > 5 and profile[5] else "makeup_artist_card.png"

    st.markdown("<div class='profile-header'>", unsafe_allow_html=True)
    col_img, col_info = st.columns([1, 3])
    with col_img:
        st.image(img_path, width=120)
    with col_info:
        artist_name = st.session_state.get('artist_name', 'Jane Doe')
        st.markdown(f"<h2 style='margin-bottom:0.2em'>{artist_name}</h2>", unsafe_allow_html=True)

        roles = st.session_state.get("roles", [])
        if roles:
            st.markdown(f"<div class='profile-roles'>{' ¬∑ '.join(roles)}</div>", unsafe_allow_html=True)

        if profile and profile[2]:  # About Me visibility
            about_text = profile[1] or ""
            about_text_html = about_text.replace('\n', '<br>')
            st.markdown(f"<div style='margin-bottom:0.5em'>{about_text_html}</div>", unsafe_allow_html=True)

        # --- Social Links with Link Preview ---
        if profile and profile[4]:  # Social Links visibility
            social_links = profile[3].split(",") if profile[3] else []
            st.markdown("<div class='profile-social'>", unsafe_allow_html=True)

            for link in social_links:
                link = link.strip()
                if link:
                    preview = get_link_preview(link)
                    # Use mailto: for emails
                    href = f"mailto:{link}" if "@" in link and "://" not in link else link
                    st.markdown(f"""
                    <div style='
                        display: inline-block;
                        background-color: #f4f4f4;
                        color: #333;
                        padding: 8px 14px;
                        border-radius: 18px;
                        font-size: 14px;
                        font-weight: 500;
                        margin: 4px 6px 4px 0;
                        box-shadow: 1px 1px 6px rgba(0,0,0,0.05);
                    '>
                        üîó <a href="{href}" style='text-decoration: none; color: #333;' target="_blank">{preview}</a>
                    </div>
                    """, unsafe_allow_html=True)

            st.markdown("</div>", unsafe_allow_html=True)

    # --- Services & Booking Display ---
    services = st.session_state.get("services", [])
    st.markdown("### Services & Booking")

    # Always show contact prompt
    st.markdown("üì© For bookings or inquiries, feel free to reach out via my provided links. I‚Äôd love to hear from you!")

    # ‚úÖ Only show actual service items if available and not in 'contact' mode
    if availability.get("available") and availability.get("mode") != "contact":
        if services:
            for svc in services:
                col1, col2 = st.columns([0.85, 0.15])
                with col1:
                    st.markdown(f"**{svc['name']}**  \n_{svc['desc']}_")
                with col2:
                    st.markdown(f"{svc['price']} {svc['currency']} / {svc['duration']} min")
        else:
            st.info("No services listed.")
    

        #if "show_booking_widget" not in st.session_state:
        #    st.session_state["show_booking_widget"] = False

#        if not st.session_state["show_booking_widget"]:
#            if st.button("Book Now", key="public_book_btn"):
#                st.session_state["show_booking_widget"] = True

#        if st.session_state["show_booking_widget"]:
#            st.markdown("### üìÜ Book a Service (Client View)")
#            booking_widget(services, availability, user_id)
#            if st.button("Cancel Booking", key="cancel_booking_btn"):
#                st.session_state["show_booking_widget"] = False

#    #st.markdown("### Availability")
#    #st.markdown("**Contact Options:** üìß ‚úâÔ∏è üìû")
    availability = st.session_state.get("availability", {})
    if availability.get("available"):
        st.markdown(f"**Region:** {availability.get('region', '')} &nbsp; | &nbsp; **Time Zone:** {availability.get('timezone', '')}")
        if "mode" in availability:
            if availability["mode"] == "same":
                st.markdown(f"**Available time:** {', '.join(availability.get('blocks', []))}")
                if availability.get("off_days"):
                    st.markdown(f"**Off days:** {', '.join(availability['off_days'])}")
            elif availability["mode"] == "custom":
                for date, blocks in availability.get("dates", []):
                    st.markdown(f"{date.strftime('%A, %b %d, %Y')}: {', '.join(blocks)}")
            elif availability["mode"] == "contact":
                st.markdown("_Please contact to book_")
    else:
        st.info("Currently not available for booking.")

    #st.markdown("<span style='font-size:0.9em; color:#888;'>How people think about me? <a href='#' style='font-size:0.8em;'>(Click to view)</a></span>", unsafe_allow_html=True)

    st.markdown("----")
    st.markdown("## Portfolio")

    all_categories = set()
    for p in all_projects:
        cats = get_project_categories(p)
        all_categories.update(cats if isinstance(cats, list) else [c.strip() for c in cats.split(",")])

    selected_cats = st.session_state.get("selected_portfolio_cats", set())
    if "reset_filter" in st.session_state:
        selected_cats = set()
        st.session_state.pop("reset_filter")

    def category_match(proj):
        cats = get_project_categories(proj)
        cats = cats if isinstance(cats, list) else [c.strip() for c in cats.split(",")]
        return not selected_cats or any(c in selected_cats for c in cats)

    filtered_projects = [p for p in all_projects if category_match(p)]
    filtered_projects.sort(
        key=lambda p: p[13] if len(p) >= 14 and isinstance(p[13], datetime.datetime) else datetime.datetime.min
,
        reverse=True
    )

    count_sketch = sum(1 for p in filtered_projects if p[1] == "sketch" and (len(p) < 13 or p[12] == 1))
    count_regular = sum(1 for p in filtered_projects if p[1] == "regular" and (len(p) < 13 or p[12] == 1))
    count_ai = sum(1 for p in filtered_projects if p[1] == "ai" and (len(p) < 13 or p[12] == 1))
    count_video = sum(1 for p in filtered_projects if p[1] == "video" and (len(p) < 13 or p[12] == 1))

    tab_titles = [
        f"Face Sketch + Final Look ({count_sketch})",
        f"Regular Images ({count_regular})",
        f"AI Images ({count_ai})",
        f"Videos ({count_video})"
    ]
    portfolio_tab = st.tabs(tab_titles)

    # --- Face Sketch + Final Look Tab ---
    with portfolio_tab[0]:
        sketch_projects = [p for p in filtered_projects if p[1] == "sketch" and (len(p) < 13 or p[12] == 1)]

        if not sketch_projects:
            st.info("No projects yet in this category.")

        for i in range(0, len(sketch_projects), 3):
            row = st.columns(3)
            for j in range(3):
                if i + j < len(sketch_projects):
                    proj = sketch_projects[i + j]
                    idx = i + j
                    header = proj[2]
                    sketch_b64 = image_to_base64(proj[8])
                    final_b64 = image_to_base64(proj[9])
                    with row[j]:
                        st.markdown(f"<div style='text-align:center;'>", unsafe_allow_html=True)
                        st.markdown(f"""
                            <div style="display:flex; gap:8px; justify-content:center; margin-bottom:4px;">
                                <img src="data:image/png;base64,{sketch_b64}" style="width:90px; height:90px; border-radius:8px; object-fit:cover;"/>
                                <img src="data:image/png;base64,{final_b64}" style="width:90px; height:90px; border-radius:8px; object-fit:cover;"/>
                            </div>
                            <div style="font-size:0.85em;">{header}</div>
                        """, unsafe_allow_html=True)
                        if st.button("View Full", key=f"viewfull_sketch_{idx}"):
                            st.session_state["fullscreen_portfolio_idx"] = idx
                            st.session_state["fullscreen_portfolio_type"] = "sketch"

            # Inline full view under the row
            for j in range(3):
                if i + j < len(sketch_projects):
                    idx = i + j
                    if st.session_state.get("fullscreen_portfolio_idx") == idx and st.session_state.get("fullscreen_portfolio_type") == "sketch":
                        proj = sketch_projects[idx]
                        sketch_b64 = image_to_base64(proj[8])
                        final_b64 = image_to_base64(proj[9])
                        st.markdown(f"""
                            <div class="popup-panel" style="padding:12px; background-color:#fff4f7; border-radius:14px;">
                                <div style="display:flex; gap:16px; justify-content:center;">
                                    <img src="data:image/png;base64,{sketch_b64}" style="width:45%; border-radius:14px; object-fit:cover;"/>
                                    <img src="data:image/png;base64,{final_b64}" style="width:45%; border-radius:14px; object-fit:cover;"/>
                                </div>
                                <div style="margin-top:10px;">
                                    <b>Header:</b> {proj[2]}<br>
                                    <b>Categories:</b> {get_project_categories(proj)}<br>
                                    <b>Hashtag:</b> {proj[5]}<br>
                                    <b>Designer:</b> {proj[3]}<br>
                                    <b>Social:</b> {proj[6]}<br>
                                    <b>Comment:</b> {proj[7]}
                                </div>
                                <div style="text-align:right; margin-top:8px;">
                        """, unsafe_allow_html=True)
                        if st.button("‚ùå Close", key=f"close_sketch_{idx}"):
                            st.session_state["fullscreen_portfolio_idx"] = None
                            st.session_state["fullscreen_portfolio_type"] = None
                            st.rerun()

    # --- Regular Images Tab ---
    with portfolio_tab[1]:
        regular_projects = [p for p in filtered_projects if p[1] == "regular" and (len(p) < 13 or p[12] == 1)]

        if not regular_projects:
            st.info("No projects yet in this category.")

        for i in range(0, len(regular_projects), 3):
            row = st.columns(3)
            for j in range(3):
                if i + j < len(regular_projects):
                    proj = regular_projects[i + j]
                    idx = i + j
                    header = proj[2]
                    img_b64 = image_to_base64(proj[8])
                    with row[j]:
                        st.markdown(f"<div style='text-align:center;'>", unsafe_allow_html=True)
                        st.markdown(f"""
                            <div style="display:flex; justify-content:center; margin-bottom:4px;">
                                <img src="data:image/png;base64,{img_b64}" style="width:180px; height:120px; border-radius:8px; object-fit:cover;"/>
                            </div>
                            <div style="font-size:0.85em;">{header}</div>
                        """, unsafe_allow_html=True)
                        if st.button("View Full", key=f"viewfull_regular_{idx}"):
                            st.session_state["fullscreen_portfolio_idx"] = idx
                            st.session_state["fullscreen_portfolio_type"] = "regular"

            # Inline full view under the row
            for j in range(3):
                if i + j < len(regular_projects):
                    idx = i + j
                    if st.session_state.get("fullscreen_portfolio_idx") == idx and st.session_state.get("fullscreen_portfolio_type") == "regular":
                        proj = regular_projects[idx]
                        img_b64 = image_to_base64(proj[8])
                        st.markdown(f"""
                            <div class="popup-panel" style="padding:12px; background-color:#fff4f7; border-radius:14px;">
                                <div style="display:flex; justify-content:center;">
                                    <img src="data:image/png;base64,{img_b64}" style="width:60%; border-radius:14px; object-fit:cover;"/>
                                </div>
                                <div style="margin-top:10px;">
                                    <b>Header:</b> {proj[2]}<br>
                                    <b>Categories:</b> {get_project_categories(proj)}<br>
                                    <b>Hashtag:</b> {proj[5]}<br>
                                    <b>Designer:</b> {proj[3]}<br>
                                    <b>Social:</b> {proj[6]}<br>
                                    <b>Comment:</b> {proj[7]}
                                </div>
                                <div style="text-align:right; margin-top:8px;">
                        """, unsafe_allow_html=True)
                        if st.button("‚ùå Close", key=f"close_regular_{idx}"):
                            st.session_state["fullscreen_portfolio_idx"] = None
                            st.session_state["fullscreen_portfolio_type"] = None
                            st.rerun()

    # --- AI Images Tab ---
    with portfolio_tab[2]:
        ai_projects = [p for p in filtered_projects if p[1] == "ai" and (len(p) < 13 or p[12] == 1)]

        if not ai_projects:
            st.info("No projects yet in this category.")

        for i in range(0, len(ai_projects), 3):
            row = st.columns(3)
            for j in range(3):
                if i + j < len(ai_projects):
                    proj = ai_projects[i + j]
                    idx = i + j
                    header = proj[2]
                    img_b64 = image_to_base64(proj[8])
                    with row[j]:
                        st.markdown(f"<div style='text-align:center;'>", unsafe_allow_html=True)
                        st.markdown(f"""
                            <div style="display:flex; justify-content:center; margin-bottom:4px;">
                                <img src="data:image/png;base64,{img_b64}" style="width:180px; height:120px; border-radius:8px; object-fit:cover;"/>
                            </div>
                            <div style="font-size:0.85em;">{header}</div>
                        """, unsafe_allow_html=True)
                        if st.button("View Full", key=f"viewfull_ai_{idx}"):
                            st.session_state["fullscreen_portfolio_idx"] = idx
                            st.session_state["fullscreen_portfolio_type"] = "ai"

            # Inline full view under the row
            for j in range(3):
                if i + j < len(ai_projects):
                    idx = i + j
                    if st.session_state.get("fullscreen_portfolio_idx") == idx and st.session_state.get("fullscreen_portfolio_type") == "ai":
                        proj = ai_projects[idx]
                        img_b64 = image_to_base64(proj[8])
                        st.markdown(f"""
                            <div class="popup-panel" style="padding:12px; background-color:#fff4f7; border-radius:14px;">
                                <div style="display:flex; justify-content:center;">
                                    <img src="data:image/png;base64,{img_b64}" style="width:60%; border-radius:14px; object-fit:cover;"/>
                                </div>
                                <div style="margin-top:10px;">
                                    <b>Header:</b> {proj[2]}<br>
                                    <b>Categories:</b> {get_project_categories(proj)}<br>
                                    <b>Hashtag:</b> {proj[5]}<br>
                                    <b>Designer:</b> {proj[3]}<br>
                                    <b>Social:</b> {proj[6]}<br>
                                    <b>Comment:</b> {proj[7]}
                                </div>
                                <div style="text-align:right; margin-top:8px;">
                        """, unsafe_allow_html=True)
                        if st.button("‚ùå Close", key=f"close_ai_{idx}"):
                            st.session_state["fullscreen_portfolio_idx"] = None
                            st.session_state["fullscreen_portfolio_type"] = None
                            st.rerun()

    # --- Videos Tab ---
    with portfolio_tab[3]:
        video_projects = [p for p in filtered_projects if p[1] == "video" and (len(p) < 13 or p[12] == 1)]

        if not video_projects:
            st.info("No projects yet in this category.")

        for i in range(0, len(video_projects), 3):
            row = st.columns(3)
            for j in range(3):
                if i + j < len(video_projects):
                    proj = video_projects[i + j]
                    idx = i + j
                    header = proj[2]
                    with row[j]:
                        st.markdown(f"<div style='text-align:center;'>", unsafe_allow_html=True)
                        if proj[10] and os.path.exists(proj[10]):
                            st.video(proj[10])
                        st.markdown(f"<div style='font-size:0.85em; margin: 6px 0;'>{header}</div>", unsafe_allow_html=True)
                        if st.button("View Full", key=f"viewfull_video_{idx}"):
                            st.session_state["fullscreen_portfolio_idx"] = idx
                            st.session_state["fullscreen_portfolio_type"] = "video"

            # Inline full view under the row
            for j in range(3):
                if i + j < len(video_projects):
                    idx = i + j
                    if st.session_state.get("fullscreen_portfolio_idx") == idx and st.session_state.get("fullscreen_portfolio_type") == "video":
                        proj = video_projects[idx]
                        st.markdown(f"""
                            <div class="popup-panel" style="padding:12px; background-color:#fff4f7; border-radius:14px;">
                                <div style="display:flex; justify-content:center;">
                        """, unsafe_allow_html=True)
                        if proj[10] and os.path.exists(proj[10]):
                            st.video(proj[10])
                        st.markdown(f"""
                                </div>
                                <div style="margin-top:10px;">
                                    <b>Header:</b> {proj[2]}<br>
                                    <b>Categories:</b> {get_project_categories(proj)}<br>
                                    <b>Hashtag:</b> {proj[5]}<br>
                                    <b>Designer:</b> {proj[3]}<br>
                                    <b>Social:</b> {proj[6]}<br>
                                    <b>Comment:</b> {proj[7]}
                                </div>
                                <div style="text-align:right; margin-top:8px;">
                        """, unsafe_allow_html=True)
                        if st.button("‚ùå Close", key=f"close_video_{idx}"):
                            st.session_state["fullscreen_portfolio_idx"] = None
                            st.session_state["fullscreen_portfolio_type"] = None
                            st.rerun()


    st.stop()


Here, how is it?